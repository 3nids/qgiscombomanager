{"name":"Qgis Combo Manager","tagline":"QGIS Combo Manager is a python module to easily manage combo boxes for layer lists and field lists.","body":"## Quick start\r\n\r\n[QGIS](http://www.qgis.org) Combo Manager is a python module to easily manage a combo box with\r\na layer list and eventually relate it with one or several combos with\r\nlist of corresponding fields.\r\n\r\nThe field combos are filled with the names of columns of the currently\r\nselected layer in the layer combo.\r\n\r\nIn your plugin, create first a _LayerCombo_:\r\n\r\n`self.LayerComboManager = VectorLayerCombo(iface.legendInterface(), self.layerComboWidget)`\r\n\r\n\r\nThen, associates some _FieldCombo_:\r\n\r\n`self.myFieldComboManager = FieldCombo(self.myFieldComboManager, self.LayerComboManager)`\r\n\r\n\r\nThe managers (layer or field) must be saved as a class property (self.something), so the variable is not\r\ngetting out of scope in python.\r\n\r\nThe classes offers some convenience methods: _getLayer()_, for layer combos, and _getFieldName()_, _getFieldAlias()_, _getFieldIndex()_ for field combos.\r\n\r\n## Installing the module\r\n\r\nTo use this module you can easily copy the files and put them in your project.\r\nA more elegant way is to use git submodule. Hence, you can keep up with latest improvements. In you plugin directory, do\r\n\r\n`git submodule add git://github.com/3nids/qgiscombomanager.git`\r\n\r\nThen, import the needed classes:\r\n\r\n`from qgiscombomanager import LayerCombo, RasterLayerCombo, VectorLayerCombo, FieldCombo`\r\n\r\n## Layer Combos\r\n\r\nA combo box can be assigned to list the layers. Three classes are available:\r\n* _LayerCombo_\r\n* _VectorLayerCombo_\r\n* _RasterLayerCombo_\r\n\r\n`LayerCombo(legendInterface, widget, initLayer=\"\", options={}, layerType=None)`\r\n\r\n_VectorLayerCombo_ and _RasterLayerCombo_ are convenient classes which are calling the main LayerCombo class with the same parameters specifying the _layerType_.\r\n\r\n* legendInterface: give the legendInterface (used to display layers in the same way as in the legend)\r\n* widget: the QComboBox widget\r\n* initLayer: the initally selected layer ID or a lambda function returning the ID (it could look for a value in settings)\r\n* options: a dictionnary of options: {\"opt1\": val1, \"opt2\": val2, etc.}. Options are listed hereunder (default values are first listed).\r\n\r\n**Options**\r\n* groupLayers: False/True. Groups layers in combobox according to the legend interface groups\r\n* hasGeometry(1): None/True/False. Restrains the possible selection of layers to layers having or not geometry (None = all).\r\n* geomType(1): None/QGis.Point/QGis.Line/QGis.Polygon. Restrains the possible selection of layers to a certain [type of geometry](http://qgis.org/api/classQGis.html#a09947eb19394302eeeed44d3e81dd74b). (None = all)\r\n* dataProvider: None/postgres/etc. Filters the layers based on the data provider name (None = all).\r\n* finishInit: True/False. If False, the combo box will not be initiated (filled with layers). this might useful if you want the manager to be returned before it is filled with layers.\r\n\r\n(1): used for vector layer combos\r\n\r\n\r\n## Field combos\r\n\r\nA combo box can be assigned to list the fields related to a given VectorLayerCombo.\r\n\r\n`FieldCombo(widget, vectorLayerCombo, initField=\"\", fieldType=None)`\r\n\r\n* widget: the qcombobox widget\r\n* vectorLayerCombo: the parent combobox defining the used vector layer\r\n* initField: the initially selected field name or a lambda function returning the name (it could look for a value in settings)\r\n* fieldType: restrain the possible selection to a certain type of field (see [QGIS doc](http://qgis.org/api/classQgsField.html#a00409d57dc65d6155c6d08085ea6c324) or [Qt doc](http://developer.qt.nokia.com/doc/qt-4.8/qmetatype.html#Type-enum)).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}