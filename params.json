{"name":"Qgis Combo Manager","tagline":"QGIS Combo Manager is a python module to easily manage combo boxes for layer lists and field lists.","body":"## Quick start\r\n\r\n[QGIS](http://www.qgis.org) Combo Manager is a python module to easily manage a combo box with\r\na layer list and eventually relate it with one or several combos with\r\nlist of corresponding fields.\r\n\r\nThe field combos are filled with the names of columns of the currently\r\nselected layer in the layer combo.\r\n\r\nIn your plugin, create first a _LayerCombo_:\r\n\r\n```python\r\nfrom qgiscombomanager import *\r\n\r\nself.LayerComboManager = VectorLayerCombo(iface.legendInterface(), self.layerComboWidget)\r\n```\r\n\r\n\r\nThen, associates some _FieldCombo_:\r\n\r\n```python\r\nself.myFieldComboManager = FieldCombo(self.myFieldComboManager, self.LayerComboManager)\r\n```\r\n\r\n\r\nThe managers (layer or field) must be saved as a class property (self.something), so the variable is not\r\ngetting out of scope in python.\r\n\r\nThe classes offers some convenience methods: `getLayer()` and `setLayer(layer)`, for layer combos, and `getFieldName()`, `getFieldAlias()`, `getFieldIndex()` for field combos.\r\n\r\n\r\n## Layer Combos\r\n\r\nA combo box can be assigned to list the layers. Three classes are available:\r\n\r\n```python\r\nLayerCombo(widget, initLayer=\"\", options={}, layerType=None)\r\nVectorLayerCombo(widget, initLayer=\"\", options={})\r\nRasterLayerCombo(widget, initLayer=\"\", options={})\r\n```\r\n\r\n`VectorLayerCombo` and `RasterLayerCombo` are convenient classes which are calling the main LayerCombo class with the same parameters and specifying the `layerType`.\r\n\r\n* **widget**: the QComboBox widget\r\n* **initLayer**: the initally selected layer ID or a lambda function returning the ID (it could look for a value in settings).\r\n* **options**: a dictionnary of options: {\"opt1\": val1, \"opt2\": val2, etc.}.\r\n\r\n**Options** are listed hereunder, default values being listed first:\r\n* **hasGeometry***: None/True/False. Restrains the possible selection of layers to layers having or not geometry (None = all).\r\n* **geomType***: None/QGis.Point/QGis.Line/QGis.Polygon. Restrains the possible selection of layers to a certain [type of geometry](http://qgis.org/api/classQGis.html#a09947eb19394302eeeed44d3e81dd74b) (None = all).\r\n* **dataProvider**: None/postgres/etc. Filters the layers based on the data provider name (None = all).\r\n* **groupLayers**: False/True. Groups layers in combobox according to the legend interface groups.\r\n* **legendInterface**: if `groupLayers is True`, you must provide `iface.legendInterface()` for this option.\r\n* **finishInit**: True/False. Set it to  `False` if the `LayerCombo` object must be returned before its items are filled with layers.\r\n\r\n*used for vector layer combos\r\n\r\nThese classes offer convenient methods:\r\n\r\n* `getLayer()`: returns the layer currently selected in the combo box\r\n* `setLayer(layer)`: set the given layer as currently selected in the combo box\r\n\r\n\r\n## Field combos\r\n\r\nA combo box can be assigned to list the fields related to a given VectorLayerCombo.\r\n\r\n```python\r\nFieldCombo(widget, vectorLayerCombo, initField=\"\", fieldType=None)\r\n```\r\n\r\n* **widget**: the qcombobox widget\r\n* **vectorLayerCombo**: the combobox defining the vector layer\r\n* **initField**: the initially selected field name or a lambda function returning the name (it could look for a value in settings)\r\n* **fieldType**: restrain the possible selection to a certain type of field (see [QGIS doc](http://qgis.org/api/classQgsField.html#a00409d57dc65d6155c6d08085ea6c324) or [Qt doc](http://developer.qt.nokia.com/doc/qt-4.8/qmetatype.html#Type-enum)).\r\n\r\nThis class offer convenient methods:\r\n* `getFieldName()`: returns the name of the currently selected field\r\n* `getFieldAlias()`: returns the alias of the currently selected field\r\n* `getFieldIndex()`: returns the field index of the currently selected field\r\n\r\n## Band combos\r\n\r\nSimilarly to field combos, a combo box can be assigned to list the bands related to a given RasterLayerCombo.\r\n\r\n```python\r\nBandCombo(widget, rasterLayerCombo, initBand=None)\r\n```\r\n\r\n* **widget**: the qcombobox widget\r\n* **rasterLayerCombo**: the combobox defining the raster layer\r\n* **initBand**: the initially selected band (integer) or a lambda function returning it (it could look for a value in settings)\r\n\r\n\r\n\r\n## Using git submodules\r\n\r\nTo use this module you can easily copy the files and put them in your project.\r\nA more elegant way is to use [git submodule](http://git-scm.com/book/en/Git-Tools-Submodules). Hence, you can keep up with latest improvements. In you plugin directory, do\r\n\r\n```\r\ngit submodule add git://github.com/3nids/qgiscombomanager.git\r\n```\r\n\r\nA folder _qgiscombomanager_ will be added to your plugin directory. However, git only references the module, and you can `git pull` in this folder to get the last changes.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}